<?php
namespace Eagle\Crud\Models;


use Eagle\Content\Forms\Form;
use Eagle\Core\Models\Model;

class Project extends Model
{

    /**
     * @var string
     */
    protected $_path = '';

    /**
     * @var string
     */
    protected $_name = '';

    /**
     * @var string
     */
    protected $_crud_path = '';

    /**
     * @var string
     */
    protected $_namespace = '';

    /**
     * @var string
     */
    protected $_export_path = '';


    /**
     * @var Form[]
     */
    protected $_forms = [];

    /**
     * Models, there are also used to build the db
     * @var Model[]
     */
    protected $_mvc_models = [];

    /**
     * @var Controller[]
     */
    protected $_controllers = [];

    /**
     * List of folders / instances possible by the module
     * All the values must have a protected $_name property defined
     * Also for each there must be added a method to create the actuall content protected create createValueFiles()
     * Call createValueFiles() into create() method
     * @var array
     */
    protected $_instances = [

        'forms',
        'mvc_models',
        'controllers'

    ];


    public function create()
    {
        $this->createStructureAndDefaultFiles();

        $this->creatFormsFiles();

        $this->createMvcModelsFiles();

        $this->createControllersFiles();


    }

    public function createControllersFiles()
    {
        foreach ($this->_controllers as $controller) {
            Scanner::writeToFile($this->_export_path . '/controllers', $controller, '%sController.php');

        }

    }

    public function createMvcModelsFiles()
    {
        foreach ($this->_mvc_models as $model) {
            Scanner::writeToFile($this->_export_path . '/models', $model);
        }
    }

    public function creatFormsFiles()
    {

        foreach ($this->_forms as $form) {
            Scanner::writeToFile($this->_export_path . '/forms', $form);

        }
    }

    public function createStructureAndDefaultFiles()
    {


        //folders to create
        $folders = [
            $this->_export_path,
            $this->_export_path . '/config',
            $this->_export_path . '/controllers',
            $this->_export_path . '/models',
            $this->_export_path . '/forms',
            $this->_export_path . '/views',
        ];

        foreach ($folders as $folder) {
            if (!is_dir($folder)) {
                mkdir($folder, 0775);
            }

            if (!is_dir($folder)) {
                throw new \Exception("Could not create folder {$folder}");
            }
        }

        //files to create
        $files = [
            $this->_export_path . '/config/info.php' => "<?php
                    return [
                        'key' => '{$this->getName()}',
                        'priority' => 200,
                        'name' => '" . strtoupper($this->getName()) . "',
                        'description' => 'Project generated by user using generator',
                        'namespace' => '\\$this->_namespace',
                        'group' => 'Generator',
                        'version' => 0.1,
                    ];",
            //this is the Module.php file //TODO make it preatty as a method
            $this->_export_path . '/Module.php' => str_ireplace(
                'REPLACE_PROJECT_NAMESPACE',
                $this->_namespace,
                file_get_contents(\Phalcon\DI::getDefault()->get('config')->crud->templates . '/Module.php')
            ),
            //this is the ControllerBase.php file //TODO make it preatty as a method
            $this->_export_path . '/controllers/ControllerBase.php' => str_ireplace(
                'REPLACE_PROJECT_NAMESPACE',
                $this->_namespace,
                file_get_contents(\Phalcon\DI::getDefault()->get('config')->crud->templates . '/ControllerBase.php')
            )
        ];

        foreach ($files as $file_name => $content) {
            Scanner::writeToFile($file_name, $content);
        }

        return $folders;

    }


    /**
     * Load all the files into the class
     * @throws \Exception
     */
    public function load()
    {

        $this->setCrudPath($this->_path . '/' . $this->_name);
        $this->setExportPath(MODULES_PATH . '/' . trim(strtolower($this->getName())));

        if (!is_dir($this->getCrudPath())) {
            throw new \Exception("Invalid path for project {$this->_name}");
        }


        foreach ($this->_instances as $folder) {

            $scan_object = new Scanner([
                'path' => $this->getCrudPath() . '/' . $folder,
                'namespace' => $this->_namespace
            ]);

            $variable_name = '_' . $folder;

            if (!isset($this->$variable_name)) {
                throw new \Exception("Invalid property {$folder}");
            }
            $this->$variable_name = $scan_object->load();


        }

        //loaded everyting, now throw it all on DI
        \Phalcon\DI::getDefault()->set('project', $this);

        return $this;

    }

    /**
     * @return string
     */
    public function getExportPath()
    {
        return $this->_export_path;
    }

    /**
     * @param string $export_path
     * @return Project
     */
    public function setExportPath($export_path)
    {
        $this->_export_path = (string) $export_path;
        return $this;
    }


    /**
     * @return string
     */
    public function getCrudPath()
    {
        return $this->_crud_path;
    }

    /**
     * @param string $project_path
     * @return Project
     */
    protected function setCrudPath($project_path)
    {

        $this->_crud_path = (string) $project_path;
        return $this;
    }


    /**
     * @return string
     */
    public function getName()
    {
        return $this->_name;
    }

    /**
     * @param string $name
     * @return Project
     */
    public function setName($name)
    {
        $this->_name = (string) $name;
        return $this;
    }

    /**
     * @return string
     */
    public function getPath()
    {
        return $this->_path;
    }

    /**
     * @param string $path
     * @return Project
     */
    public function setPath($path)
    {
        $this->_path = (string) $path;
        return $this;
    }

    /**
     * @return string
     */
    public function getNamespace()
    {
        return $this->_namespace;
    }

    /**
     * @param string $namespace
     * @return Project
     */
    public function setNamespace($namespace)
    {
        $this->_namespace = (string) $namespace;
        return $this;
    }


}