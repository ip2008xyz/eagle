<?php
namespace Eagle\Crud\Models;


use Eagle\Content\Forms\Form;
use Eagle\Core\Models\Model;

class Project extends Model
{

    /**
     * @var string
     */
    protected $_path = '';

    /**
     * @var string
     */
    protected $_name = '';

    /**
     * @var string
     */
    protected $_crud_path = '';


    /**
     * @var string
     */
    protected $_export_path = '';


    /**
     * @var Form[]
     */
    protected $_forms = [];


    /**
     * List of folders / instances possible by the module
     * @var array
     */
    protected $_instances = [

        'form',
        //  'db',
        //  'flow'

    ];


    public function create()
    {
        $this->createStructureAndDefaultFiles();

        $this->creatFormFiles();


    }

    public function creatFormFiles()
    {

        foreach ($this->_forms as $form) {
            /**
             * @var $form Form
             */
            Scanner::writeToFile($this->_export_path . '/forms', $form);

        }
    }

    public function createStructureAndDefaultFiles()
    {


        //folders to create
        $folders = [
            $this->_export_path,
            $this->_export_path . '/config',
            $this->_export_path . '/controllers',
            $this->_export_path . '/models',
            $this->_export_path . '/forms',
            $this->_export_path . '/views',
        ];

        foreach ($folders as $folder) {
            if (!is_dir($folder)) {
                mkdir($folder, 0775);
            }

            if (!is_dir($folder)) {
                throw new \Exception("Could not create folder {$folder}");
            }
        }

        //files to create
        $files = [
            $this->_export_path . '/config/info.php' => "<?php
                    return [
                        'key' => '{$this->getName()}',
                        'priority' => 200,
                        'name' => '" . ucwords($this->getName()) . "',
                        'description' => 'Project generated by user using generator',
                        'namespace' => '\\Eagle\\" . ucwords($this->getName()) . "',
                        'group' => 'Generator',
                        'version' => 0.1,
                    ];"
        ];

        foreach ($files as $file_name => $content) {
            Scanner::writeToFile($file_name, $content);

        }

        return $folders;

    }


    /**
     * Load all the files into the class
     * @throws \Exception
     */
    public function load()
    {

        $this->setCrudPath($this->_path . '/' . $this->_name);
        $this->setExportPath(MODULES_PATH . '/' . trim(strtolower($this->getName())));

        if (!is_dir($this->getCrudPath())) {
            throw new \Exception("Invalid path for project {$this->_name}");
        }


        //TODO - fix for all the pages
        foreach ($this->_instances as $folder) {
            $scan_object = new Scanner([
                'path' => $this->getCrudPath() . '/' . $folder,
                'namespace' => $this->_name,
            ]);

            $this->_forms = $scan_object->load();

        }

        //TODO this should return all the ojects not just the forms
        return $this;

    }

    /**
     * @return string
     */
    public function getExportPath()
    {
        return $this->_export_path;
    }

    /**
     * @param string $export_path
     * @return Project
     */
    public function setExportPath($export_path)
    {
        $this->_export_path = (string) $export_path;
        return $this;
    }


    /**
     * @return string
     */
    public function getCrudPath()
    {
        return $this->_crud_path;
    }

    /**
     * @param string $project_path
     * @return Project
     */
    protected function setCrudPath($project_path)
    {

        $this->_crud_path = (string) $project_path;
        return $this;
    }


    /**
     * @return string
     */
    public function getName()
    {
        return $this->_name;
    }

    /**
     * @param string $name
     * @return Project
     */
    public function setName($name)
    {
        $this->_name = (string) $name;
        return $this;
    }

    /**
     * @return string
     */
    public function getPath()
    {
        return $this->_path;
    }

    /**
     * @param string $path
     * @return Project
     */
    public function setPath($path)
    {
        $this->_path = (string) $path;
        return $this;
    }


}